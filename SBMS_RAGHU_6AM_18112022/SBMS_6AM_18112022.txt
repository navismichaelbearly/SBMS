			        Date : 17-11-2022
			 Spring Boot and Microservices
			         6AM | Demo -2
				( ASHOK IT)
			Email: javabyraghu@gmail.com
	------------------------------------------------------------
Backup Videos
Session-01 : https://youtu.be/FUaIeWo19sA
===========================================================================
Technologies: WebPages(Servlets) + Database (JDBC/JPA) + Email (Java Mail)
			+ Message Queue (JMS) ..etc

Limitations:
=> Start coding from Line Zero.
=> Lot of time to write one application.
=> Error can be bit more.
=> Design Patterns (Rules) must be applied manually.

Framework: 
=> In-built code implemented using Technologies and Design Pattern
=> RAD : Rapid Application Development (fast coding/less error rate)

*) Spring Framework:
=> This is mainly used to develop web/distributed applications.
=> It has own API.
=> It follows Container System.****

==Spring Container===========================
1. Find/Scan classes[Spring Bean]
2. Create object
3. Provide data
4. Link Objects (Based on Relations / HAS-A)
5. Finally, Destory the obj/container
-------------------------------------------------
*) We(Programmer) has to provide two inputs
a. Spring Bean = class + rules
b. Spring Configuration = XML/Java/Annotation**
 Metadata (ObjName, How many objs)
-------------------------------------------------
	       Theory            Programming
		OOPs              Core Java
		ORM               Hibernate with JPA
		DI                Spring IoC (Container)

=> Dependency Injection is a concept/theory 
 which is implemented by Spring IoC (Inversion of Control)
 also called as Spring container.

 ========================================================
*) Types of containers(2)
1. BeanFactory : (I) It supports only XML Configuration.
  It has one Impl class : XmlBeanFactory(C).

2. ApplicationContext(I): It is new container.
  It supports XML, Java and AnnotationConfiguration.
 It has multiple Impl class:
 ClassPathXmlApplicationContext(C)
 AnnotationConfigApplicationContext(C)
 ..etc

--Overview----------
interface BeanFactory{}
interface ApplicationContext extends BeanFactory{}
--------------------