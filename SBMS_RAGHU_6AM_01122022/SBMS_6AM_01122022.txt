			 Date : 01-12-2022
		    Spring Boot and Microservices
			6AM | Mr. Raghu | (ASHOK IT)
			javabyraghu@gmail.com
  --------------------------------------------------------------------- 
			Chapter#1 Spring Core

**) Spring Annotation Configuration:-
=> This is easy to configure
=> Faster in execution (compared to XML)

--------------------------------------------------------------------
1. Stereotype Annotations:-
 These annotations informs Spring Container to Create Object.
 (These annotations must be applied at class level).

=> They are 5 annotations given by Spring F/w.
=> These annotations are added in Spring version 2.5

@Component    : Creates object inside container.
@Repository   : Creates object + Database Operations
@Service      : Creates object + Transaction/Logics/calculations..etc
@Controller   : Creates object + HTTP Protocol (Web Apps)
@RestController : Creates object + HTTP Protocol (Webservices)

--------Examples-------------------------------------
#1
@Component
public class ExcelExport {

}
=> In this case Spring container creates Objects using obj Name excelExport
  (camelCaseRule : First Letter of className is lowercase)
#2
@Component("eobj")
public class ExcelExport {

}
=> Object is created with name : eobj

------------------------------------------------------------
2. Data annotations/ Basic Annotations

@Value Annotation is used to provide data (Field Inject)
 to variable. 
It has 3 usages: 
 | - Hardcoding (Direct value to a variable)
 | - Reading Data from Properties/YAML File
 | - SpEL (Spring Expression Language)
 	
@Autowired | @Qualifier | @Primary
 To link objects (Ref Type)

========Code============================================================
1. pom.xml
<properties>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.23</version>
		</dependency>
	</dependencies>

2. Spring Bean + Spring Configuration Code
package com.app.raghu;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("exObj")
public class ExcelExport {
	
	@Value("TEST")
	private String exportName;
	
	@Value("csv")
	private String fileExt;
	
	@Override
	public String toString() {
		return "ExcelExport [exportName=" + exportName + ", fileExt=" + fileExt + "]";
	}
	
	
}

3. Test class
package com.app.raghu;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext();
		//find classes from a package(basePackage)
		ac.scan("com.app.raghu");
		//create object 
		ac.refresh();
		
		ExcelExport ee = ac.getBean("exObj", ExcelExport.class);
		System.out.println(ee);
	}
}
==================================================================
******* basePackage : It is a packageName.
=> from this package name, Spring container will search for classes
  from current package and all its subpackages.

=> @ComponentScan(basePackages="com.app.test")
		[or]
=> @ComponentScan("com.app.test")

@ComponentScan = Find for classes having stereotype annotation
	from given package or subpackage into Spring container.
------------------------------------------------------------------
=> Define one public class with any name
=> Apply @ComponentScan over such class
=> pass that class as input to ApplicationContext

=========Example#2======================================
1. Spring Bean
package com.app.raghu;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("exObj")
public class ExcelExport {
	
	@Value("TEST")
	private String exportName;
	
	@Value("csv")
	private String fileExt;
	
	@Override
	public String toString() {
		return "ExcelExport [exportName=" + exportName + ", fileExt=" + fileExt + "]";
	}
	
	
}

2. Spring Config File
package com.app.raghu;

import org.springframework.context.annotation.ComponentScan;

//@ComponentScan(basePackages = "com.app.raghu")
@ComponentScan("com.app.raghu")
//@ComponentScan({"com.app.raghu", "my.app.test"})
public class MyAppConfig {

}

3. Test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		ExcelExport ee = ac.getBean("exObj", ExcelExport.class);
		System.out.println(ee);
	}
}
=================================================================
Q) is BasePackage must be given as input to ApplicationContext?
A) In case of Annotation Config, it is must. 

Q) Can we provide multiple basePackages to Spring container?
A) YES. use {} symbol.
ex:
  @ComponentScan({"com.app","test.one","abc.xyz"})

Q) A class is found in basePackage but not having any StrereoType annotation.
   does Spring container create Object?

A) No. @Component or any equal type is required.


Q) If a class is not under basePackage but having @Component.
   does Spring container create Object?

A) No. Class must present under given basePackage and must have
	@Component.