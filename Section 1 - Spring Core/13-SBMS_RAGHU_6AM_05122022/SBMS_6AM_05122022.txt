			 Date : 05-12-2022
		    Spring Boot and Microservices
			6AM | Mr. Raghu | (ASHOK IT)
  --------------------------------------------------------------------- 
Autowiring:-
=> Link two classes objects, if classes are in HAS-A Relation.

1. If Zero Matchings Found -- Throw Exception (or use required=false)
2. If One Matching is Found -- Inject Object.

=========================================================================
		Spring Bean - LifeCycle Methods

Method : Set of Statements that executes a task.
class A{
  void m1() {}
}
-------------------------------------
LifeCycle Method : If a method is called by container/runtime in between
    Object creation and destroy.

Servlets:[Adv Java] - 3 method (must be implemented)
init()	: Called/executed only once per object, after creating object
service() : Executed for every request.
destory() : Called Before Destorying object.
-----------------------------------------------------------------

Spring F/w: 2 LifeCycle Methods -- they are optional.
1. init-method    : Called after creating object.
2. destory-method : Before Destorying the object.

Ex:              ========init================       =======destroy======
File(data) ---> Open File --> Read Data --> variable --> Close File

---> We can implement LifeCycle Methods in 3 ways.
1.* XML Configuration
<bean .... init-method="" destory-method="">

=> We can define methods with any name, using below syntax:

 public void <method-Name>() { //logic... }


2.**** Spring Lifecycle Interfaces:
Spring F/w has given 2 interfaces to implement Lifecycle methods.
They are:
A)
InitializingBean(I)
   afterPropertiesSet()
B)
DisposableBean(I)
  destroy()

Your Spring Bean can implement above interface and override methods.
They are called by Spring container.

3. JSR-Annotations: These are generic annotations Given by Sun/Oracle.
 @PostConstruct
 @PreDestroy

Note:
*) init- open resources Files/Stream/Network/DB Connection ..etc
*) destory- Close Resource file.close()...etc
*) by default container memory exist in RAM even after main() method ends.
   It is cleared/closed after sometime by GC.
*) To close at sametime use ac.close() method or
   ac.registerShutdownHook() method to force shutdown.
   Use AbstractApplicationContext.

============Spring Bean -- LifeCycle Methods -- XML Config ============
1. SpringBeans
package com.app.raghu.bean;

public class ExcelExport {

	private String fileName;
	private String fileExt;
	
	public ExcelExport() {
		super();
		System.out.println("FROM CONSTRUCTOR");
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
		System.out.println("FROM SETTER METHOD");
	}

	public String getFileExt() {
		return fileExt;
	}

	public void setFileExt(String fileExt) {
		this.fileExt = fileExt;
	}

	@Override
	public String toString() {
		return "ExcelExport [fileName=" + fileName + ", fileExt=" + fileExt + "]";
	}

	public void setup() {
		System.out.println("FROM INIT METHOD");
	}
	
	public void clear() {
		System.out.println("FROM DESTORY METHOD");
	}
	
	
}

2. XML Config File
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean 
	id="exObj" 
	class="com.app.raghu.bean.ExcelExport"
	init-method="setup"
	destroy-method="clear"
	>
		<property name="fileName" value="ABC"/>
		<property name="fileExt" value="CSV"/>
	</bean>


</beans>

3. Test class
package com.app.raghu.test;

import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.app.raghu.bean.ExcelExport;

public class Test {

	public static void main(String[] args) {
		AbstractApplicationContext ac = new ClassPathXmlApplicationContext("config.xml");
		ExcelExport ee = ac.getBean("exObj",ExcelExport.class);
		System.out.println("FROM MAIN");
		System.out.println(ee);
		//ac.registerShutdownHook(); //old-style
		ac.close();
	}
}

================Spring Bean LifeCycle -- Interfaces============
1. Spring Bean
package com.app.raghu.bean;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class ExcelExport implements InitializingBean, DisposableBean {

	private String fileName;
	private String fileExt;
	
	public ExcelExport() {
		super();
		System.out.println("FROM CONSTRUCTOR");
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
		System.out.println("FROM SETTER METHOD");
	}

	public String getFileExt() {
		return fileExt;
	}

	public void setFileExt(String fileExt) {
		this.fileExt = fileExt;
	}

	@Override
	public String toString() {
		return "ExcelExport [fileName=" + fileName + ", fileExt=" + fileExt + "]";
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		System.out.println("FROM INIT METHOD");
	}
	
	@Override
	public void destroy() throws Exception {
		System.out.println("FROM DESTORY METHOD");
	}
}

2. Spring XML Config File
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean id="exObj" class="com.app.raghu.bean.ExcelExport">
		<property name="fileName" value="ABC" />
		<property name="fileExt" value="CSV" />
	</bean>

</beans>

3. Test class
package com.app.raghu.test;

import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.app.raghu.bean.ExcelExport;

public class Test {

	public static void main(String[] args) {
		AbstractApplicationContext ac = new ClassPathXmlApplicationContext("config.xml");
		ExcelExport ee = ac.getBean("exObj",ExcelExport.class);
		System.out.println("FROM MAIN");
		System.out.println(ee);
		//ac.registerShutdownHook(); //old-style
		ac.close();
	}
}
===================================================================
JSR-250 : Sun/Oracle has given Generic LifeCycle Annotations
@PostConstruct : Behaves like init method
@PreDestroy : Behaves like Desrtory method

To use them we need to add below JAR:
<dependency>
    <groupId>javax.annotation</groupId>
    <artifactId>javax.annotation-api</artifactId>
    <version>1.3.2</version>
</dependency>


1. Spring Bean
package com.app.raghu.bean;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("exObj")
public class ExcelExport {
	
	@Value("SAMPLE")
	private String fileName;
	
	@Value(".csv")
	private String fileExt;

	@Override
	public String toString() {
		return "ExcelExport [fileName=" + fileName + ", fileExt=" + fileExt + "]";
	}
	
	@PostConstruct
	public void setupA() {
		System.out.println("FROM INIT METHOD");
	}
	
	@PreDestroy
	public void clearB() {
		System.out.println("FROM DESTORY METHOD ");
	}
	
}

2. Spring Config Class
package com.app.raghu.config;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("com.app.raghu")
public class AppConfig {

}

3. Test class
package com.app.raghu.test;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;

import com.app.raghu.bean.ExcelExport;
import com.app.raghu.config.AppConfig;

public class Test {

	public static void main(String[] args) {
		AbstractApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		ExcelExport ee = ac.getBean("exObj",ExcelExport.class);
		System.out.println("FROM MAIN");
		System.out.println(ee);
		//ac.registerShutdownHook(); //old-style
		ac.close();
	}
}


4. pom.xml
<properties>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.23</version>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency>
	</dependencies>
==================================================================
Q) How many LifeCycle Methods exist in Spring F/w?
A) 2. Init and Destory called by container

Q) Which LifeCycle Method must be implemented in Spring F/w?
A) Both are optional.

Q) In How many ways we can implement LifeCycle Methods?
A)
  XML  : <bean .. init-method=" " destroy-method="">
  Interfaces :  InitializingBean, DisposableBean
  Annotations: @PostConstruct, @PreDestroy

Q) Why destory method is used?
A) To clear/Close all resources (using db.close(), file.close()..etc)
=================================================================
